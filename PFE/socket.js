// socket.js
const jwt = require('jsonwebtoken');
const jwtConfig = require('./config/jwt');
const User = require('./models/User'); // Assure-toi que ce chemin est correct

let io; // ‚úÖ Doit √™tre d√©clar√© en haut

module.exports = {
  init: (server) => {
    const { Server } = require('socket.io');

    io = new Server(server, {
      cors: {
        origin: "http://localhost:3001", // ‚ö†Ô∏è adapte si ton front est h√©berg√© ailleurs
        methods: ["GET", "POST"],
        credentials: true
      }
    });

    // üîê Middleware d'authentification WebSocket
    io.use(async (socket, next) => {
      try {
        const token = socket.handshake.auth?.token;
        if (!token) {
          console.warn('‚ùå Aucun token JWT fourni dans WebSocket');
          return next(new Error("Authentication failed"));
        }

        const decoded = jwt.verify(token, jwtConfig.secret);
        const user = await User.findById(decoded.id);

        if (!user) {
          console.warn('‚ùå Utilisateur non trouv√© avec ID :', decoded.id);
          return next(new Error("Authentication failed"));
        }

        socket.user = user; // üëà Attache l'utilisateur √† la socket
        next();
      } catch (err) {
        console.error('‚ùå Erreur d\'authentification WebSocket :', err.message);
        return next(new Error("Authentication failed"));
      }
    });

    // ‚úÖ Connexion r√©ussie
    io.on('connection', (socket) => {
      console.log(`üü¢ Utilisateur connect√© via WebSocket : ${socket.user.username} (${socket.user._id})`);

      socket.on('disconnect', () => {
        console.log(`üîå D√©connexion WebSocket : ${socket.user.username}`);
      });
    });

    return io;
  },

  getIO: () => {
    if (!io) {
      throw new Error("Socket.io non initialis√© !");
    }
    return io;
  }
};
