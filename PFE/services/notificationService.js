const Notification = require('../models/Notification');
const UserSettings = require('../models/UserSettings'); // Supprimez si inutilis√©
const { getIO } = require('../socket'); // üß† plus de boucle
 // üî• Assurez-vous que `getIO` est export√© depuis server.js

class NotificationService {
  /**
   * Cr√©e une notification pour un utilisateur, en respectant ses param√®tres de notification
   * @param {String} userId - ID de l'utilisateur
   * @param {String} type - Type de notification (system, update, etc.)
   * @param {String} message - Message de la notification
   * @param {Object} metadata - Donn√©es suppl√©mentaires (ex. missingDetails)
   * @returns {Object|null} Notification cr√©√©e ou null si d√©sactiv√©e
   */
  async createNotification(userId, type, message, metadata) {
    // V√©rifier les pr√©f√©rences utilisateur (facultatif)
    const userSettings = await UserSettings.findOne({ userId });
        //  V√©rifier si les notifications sont compl√®tement d√©sactiv√©es
        if (userSettings?.notifications?.enable === false) {
          return null; // Ne pas cr√©er si notifications d√©sactiv√©es globalement
        }
    
        //  V√©rifier si ce type est autoris√© dans allowedNotificationTypes
        const allowedTypes = userSettings?.notifications?.allowedTypes;
        if (Array.isArray(allowedTypes) && !allowedTypes.includes(type)) {
          console.log(`üîï Type "${type}" bloqu√© pour l'utilisateur ${userId}`);
          return null; //  Ne pas cr√©er si le type n‚Äôest pas autoris√©
        }
    

    // Cr√©er et sauvegarder la notification
    const notification = new Notification({
      userId,
      type,
      message,
      metadata,
      read: false,
    });
    const savedNotification = await notification.save();

    // ‚úÖ Emettre la notification via WebSocket en temps r√©el
    const io = getIO(); // <-- r√©cup√©rer l‚Äôinstance de socket.io
    if (io) {
      io.to(userId.toString()).emit('notification', savedNotification); // üî• c‚Äôest ici que √ßa se joue
    }

    return savedNotification;
  }

  /**
   * Marque une notification comme lue
   * @param {String} notificationId - ID de la notification
   * @param {String} userId - ID de l'utilisateur
   * @returns {Object|null} Notification mise √† jour ou null si non trouv√©e/non autoris√©e
   */
  async markAsRead(notificationId, userId) {
    const notification = await Notification.findById(notificationId);
    if (!notification) return null;
    if (notification.userId.toString() !== userId.toString()) return null;

    notification.read = true;
    return await notification.save();
  }
}

module.exports = new NotificationService();
